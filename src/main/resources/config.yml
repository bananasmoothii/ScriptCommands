# don't touch
config-version: 0.1

# I recommend letting that on false.
do-not-register-commands: false

# how much things it will print (write to the console) to help you finding what's wrong. Common values are INFO (default, prints only info), FINE (infos + fine info), FINER and FINEST (everything)
log-level: FINEST

# if you can't manage to log levels below INFO, I can log them as INFO and write the actual level behind.
log-through-info: true

# make every "do" section as scripts, so you do not need yo specify "script" each time. For other types, use console(format("say ""{=player}"""))
direct-scripts: false

storage:
  # can be "json", "SQLite" or "MySQL"
  method: json

  json:
    file-location: plugin/ScriptCommands/storage.json
    
    # interval in number of modification of any global variable (or any item in a list or dictionary) the plugin will wait for until to saveAndClose everything in the storage file.
    # if your scripts aren't touching global variables a lot, I would recommend letting that on 1 (saveAndClose each 1 modification, so each time) so you won't lose anything if the server crash,
    # but if you're constantly modifying these variables, it can unnecessarily take lots of resources by generating a new file each time.
    save-interval: 1
  SQLite:
    file-location: plugin/ScriptCommands/storage.db
    table-prefix: 'SC_'
  MySQL:
    hostname: ''
    port: 0
    database: ''
    user: ''
    password: ''
    table-prefix: 'SC_'
    #flags: "?allowReconnect=true" # I don't really know how that works right now soo...

messages:
  bad-args: 'player_msg &cBad arguments count, there should be &e{command.minArgs}&c to &e{maxArgs(command)}&c. (You put &e{args.count}&c)'
  confirm: 'player_msg &ePlease confirm by typing the command again. (This command costs &c&l{command.cost}{server.currency}&e).'
  no-permission: 'player_msg &cSorry, you haven''t the permission for that. If you believe this is an error, please contact an administrator.'
  error: '&4There was an error. Contact an admin or check the console for more details.'

commands:

  sometests:
    # overriding
    do-not-register: false
    # overriding
    direct-scripts: false
    # overriding (but overriding nothing because no message specified.)
    messages: {}
    description: Some tests
    usage: /sometests and things...
    permission: my-commands.some.tests and (totally.custom or CaSe.SeSiTiVe) or just.do.it # will work if the player has only "just.do.it" .
    aliases:
    - st
    - sometest
    # from 2 to what you want. possible values examples here: "3", "->10", "1->2", "9->"
    args: 2->
    cost: 1
    # default is false
    confirm: true
    script:
      - script for i in true {
      - script continue
      - script } a = log (5 * 2 * 3 / (2 // 2 % 3 + 2) ^ 8 / 1.1 * -1)
      - script a1 = log (111.111 * -2)
      - script b = 2

      - 'player_run Hello everyone ! {=player} {=player->getDisplayName} {=(args[1:]->join(" ") + "u u u")->split(" ")} {=papi("some placeholder")}'
      - player_run /spawn
      - player_msg You got teleported
      - player_msg<randChoice(["Bananasmoothii", "Dryter97"])> Hi ! {=random01()} {=randInt(2, 5)} {=randChoice(totalPlayerList->addList(offlinePlayerList))} {=onlinePlayerList}
      - console_msg {=args[0]}
      - console say hello {=player->displayname} {=args[0]} {args[0]} # = (first arg) {args[0]}
      - script console_msg("aa bb cc")
      - script toText(5)
      - console_msg abc \{=ici}
      
      - player_run /say {=args[0:]} # take first element of list args
      - script if args->count >= 5 {
      - script global varA = 56 + 7 / 8 * 3 ^ 2 // log 2 % 3 - 8 + (3 / 4) * round(10 / 3, 2) + "5.75"->toNumber + 5.5->toString->toDecimal
      - player_run /say {=args[4:5]} {=varA}
      - script }
      - script elif args[0]->type == "Text" {
      - player_msg first arg is text
      - script if args[1]->isNumber and (args[1]->isInteger or args[1]->isDecimal) {
      - player_msg<player> and second is a number
      - script } varB = [12, 6.3, "7272n", [1, 2, 3.0, "b"]]
      - player_run /test
      - script }
      - 'player_msg varB: {=varB->join(" and ")} {=log 1->thing(3, 5, "7")}'
        
      - script varC = [22]
      - script for i in range(8)->addList(args) {
      - script varC->add(i)
      - script continue }  # unuseful
      - script while true {
      - script break} # unuseful too 
      - script return varC->toText
      - player_msg this won't be executed
      
      - script for a in b->c {if d {while e{console_msg(f)
      - script if g{} elif h{} elif not j{} else {a == b ? b else c}}}}
      
      - script try {
      - script "a"->toInteger } catch err = "INVALID_TYPE" { }

  commandsThatMakeSense:
    script:
      - script my_list = ["a", 1, "w"]
      - script log my_list
      - script added_thing = 2
      - script copy = my_list
      - script my_list -> add(added_thing)
      - console_msg added {=added_thing}
      - script log my_list
      - script log copy
      - console_msg everything worked !
      - script try {
      - script throw "BIG_THING"
      - console_msg didn't worked...
      - script } catch true {
      - console_msg worked !
      - script }

  sometests2:
    script:
      - player /say {=args[0:]} # take first element of list args
      
      - script if args->count >= 5 {
      - script varA = 56 + 7 / 8 * 3 ^ 2 // 2 % 3 - 8 + (3 / 4) * round(10 / 3, 2) + "5.75"->toDecimal + 5.5->toText("a")->toDecimal()
      - player_run /say {=args[4:5]} {=varA}
      - script } elif args[0]->type == "Text" {
      - player_msg first arg is text

      - script if args[1]->isNumber and (args[1]->isInteger or args[1]->isDecimal) {
      - player_msg<player> and second is a number
      - script } varB = [12, 6.3, "7272n", log [1, 2, 3.0, "b"]] }
      - 'player_msg varB: {=varB->join(" and ")} {=1->thing(3, 5, "7")}'

functions:
  
  thing: 
    script:
      - script varC = [22]
      - script for i in range(8)->addList(args) {
      - script varC->add(i)
      - script continue }  # unuseful
      - script while true {
      - script break} # unuseful too 
      - script return varC->toText
      - player_msg this won't be executed

schedules:
  # delays are in seconds !

  - interval: 1000
    start-delay: 50
    # for overriding too
    direct-scripts: false
  
    script:
      - console_run say Hello everyone !!!!

  - interval: 123 # cannot be decimal.
    start-delay: 75
    
    script:
      - script if dayOfWeek in [1, 3, 5, 7] and monthOfYear != 12 {
      - console say hello everyone ! Get a dirt !
      - console minecraft:give @a dirt 1
      - script }

events:
  
  blockPlaceEvent:
    #direct-scripts: true # can be specified pretty much everywhere
    script:
      - console_run eco take {=player} 1
